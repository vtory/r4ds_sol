Assignment statements have the form
	object_name <- value

Shortcut for the arrow sign = Alt - (minus)
Shortcut to call the long names - type the beginning and press TAB

Calling functions
	function_name(arg1 = val1, arg2 = val2, ...)
	
	Type name of the function and press Enter/Tab - parenthesis are added automatically
	
After assignment the result is not visualised, it's needed to call the variable

Shortcut for calling immediately - wrap the assignment with parenthesis
(x <- seq(1,100,7)) - returns the result

dplyr Basics
five key dplyr functions
• Pick observations by their values (filter()).
• Reorder the rows (arrange()).
• Pick variables by their names (select()).
• Create new variables with functions of existing variables(mutate()).
• Collapse many values down to a single summary (summarize()).

These  functions provide the verbs for a language of data manipulation.
All verbs work similarly:
1. The first argument is a data frame.
2. The subsequent arguments describe what to do with the data
frame, using the variable names (without quotes).
3. The result is a new data frame.

two ways to filter dataset
filter(flights, month == 11 | month == 12) - checks the condition on month
nov_dec <- filter(flights, month %in% c(11, 12)) - simulate IN () behaviour, checks if month value is IN a vector (11,12)

Do not use && or || for filtering

Missing values
is.na()
x <- c(5, NA, 6, NA, 7, NA, 8,9,10, NA,NA)
is.na(x) - returns a logical vector that assusmes FALSE if the value is not an NA
and TRUE if it is an NA.


filter() only includes rows where the condition is TRUE; it excludes both FALSE and NA values. 


departure with delay 150 minutes
arrival with 100
